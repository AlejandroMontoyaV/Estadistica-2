knitr::opts_chunk$set(echo = TRUE, comment = NA)
library(knitr)
library(kableExtra)
library(tidyverse)
# if(!require(HH)) install.packages("HH"); library(HH)
read.csv("android-games.csv")
datos <-read.csv("android-games.csv")
View(datos)
datos <-read.csv("android-games.csv") %>%
select(title, total.ratings, five.star.ratings)
View(datos)
datos <-read.csv("android-games.csv") %>%
select(title, total_ratings, five_star_ratings)
datos <-read.csv("android-games.csv") %>%
select(title, total_ratings, five_star_rating)
View(datos)
datos
datos <- read.csv("android-games.csv")
names(datos$category)
str(datos$category)
datos <- read.csv("android-games.csv") %>%
filter(total_ratings <  4121627, category == "GAME ACTION") %>%
select(title, total_ratings, five_star_rating)
#Ejercicio 1
datos <- read.csv("android-games.csv")
#como obtengo los nombres de las variables?
names(datos)
#como se que valores hay en category?
unique(datos$category)
mod <- lm(five_star_rating ~ total_ratings, data=datos_modelo)
datos <-read.csv("android-games.csv") %>%
select(title, total_ratings, five_star_rating)
n <- nrow(datos)
set.seed(1234)
index <- sample(1:n, 4)
datos[c(6,index), ] %>%
kable(col.names = c("Titulo", "Total de calificaciones",
"Total de calificaciones cinco estrellas"),
booktab = T, caption = "Vista previa de algunas variables",
row.names = F) %>%
kable_styling(position = "center", latex_options = c("hold_position")) %>%
column_spec(2:3, width = "2.5cm", latex_valign = "m") %>%
row_spec(0:5, align = "c")
datos.modelo <- read.csv("android-games.csv") %>%
filter(total_ratings <  4121627, category == "GAME ACTION") %>%
select(total_ratings, five_star_rating)
p <- ggplot(data = datos.modelo, aes(x=total_ratings, y=five_star_rating)) + geom_point() + labs(title = "Cantidad total de calificaciones 5 estrellas vs total de calificaciones", x = "Cantidad total de calificaciones", y= "Cantidad total de calificaciones 5 estrellas") + theme_minimal()
mod <- lm(five_star_rating ~ total_ratings, data=datos.modelo)
summary(mod) #muestra el resumen del modelo
mod
coef(mod)
summary(mod)
mod
data.frame(mod)
mod.tabla <- data.frame(c(20303.78, 22173.2195, 0.9157, 0.3627), c(0.6885,   0.0128,  53.7437,  0))
mod.tabla
View(mod.tabla)
mod.tabla <- data.frame(c(20303.78, 22173.2195, 0.9157, 0.3627), c(0.6885,   0.0128,  53.7437,  0), bycol= T)
View(datos.modelo)
View(mod.tabla)
mod.tabla <- data.frame(c(20303.78, 0.6885), c(22173.2195, 0.0128), c(0.9157, 53.7437), c(0.3627, 0))
mod.tabla
View(mod.tabla)
View(mod)
mod
sumarry(mod)
summary(mod)
knitr::opts_chunk$set(echo = TRUE, comment = NA, fig.pos="H")
library(knitr)
library(kableExtra)
library(tidyverse)
# if(!require(HH)) install.packages("HH"); library(HH)
#hallando  los límites a mano
beta0 <-
#para crear la tabla:
int.conf %>%
kable(col.names = c("Estimación", "Error estándar",
"$t_{0}$", "Valor-P"),
booktab = T, caption = "Resúmen de coeficientes",
row.names = T, escape=  F)%>%
kable_styling(latex_options = c("hold_position")) %>%
column_spec(2:3, latex_valign = "m") %>%
row_spec(0:5, align = "c")
beta0
#hallando  los límites a mano
beta0 <- coef(mod)[1]
beta0
mod <- lm(five_star_rating ~ total_ratings, data=datos.modelo)
resumen <- summary(mod) #resumen del modelo
beta0 <- coef(mod)[1] #intercepto
beta1 <- coef(mod)[2] #pendiente
#función confint permite hallar los intervalos de confianza
int.beta0 <- confint(mod, "(Intercept)", level = 0.95)
int.beta1 <- confint(mod, "total_ratings", level = 0.95)
int.beta0
#para crear la tabla:
int.conf <- data.frame(int.beta0, int.beta1, row.names = c("$\\beta_0$", "$\\beta_1$"))
data.frame(int.beta0, int.beta1)
int.beta0
int.beta0[1]
int.beta0[2]
#para crear la tabla:
int.conf <- data.frame(c(int.beta0[1], int.beta1[1]), c(int.beta0[2], int.beta1[2]), row.names = c("$\\beta_0$", "$\\beta_1$"))
int.conf
View(int.conf)
int.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F) %>%
kable_styling(latex_options = c("hold_position")) %>%
column_spec(2:3, latex_valign = "m") %>%
row_spec(0:5, align = "c")
int.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F)
int.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F) %>%
kable_styling(latex_options = c("hold_position"))
int.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F) %>%
int.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F) %>%
kable_styling(latex_options = c("hold_position"))
#para crear la tabla:
inter.conf <- data.frame(c(int.beta0[1], int.beta1[1]), c(int.beta0[2], inter.beta1[2]), row.names = c("$\\beta_0$", "$\\beta_1$"))
#función confint permite hallar los intervalos de confianza
inter.beta0 <- confint(mod, "(Intercept)", level = 0.95)
inter.beta1 <- confint(mod, "total_ratings", level = 0.95)
#para crear la tabla:
inter.conf <- data.frame(c(int.beta0[1], inter.beta1[1]), c(inter.beta0[2], inter.beta1[2]), row.names = c("$\\beta_0$", "$\\beta_1$"))
inter.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F) %>%
kable_styling(latex_options = c("hold_position")) %>%
column_spec(2:3, latex_valign = "m") %>%
row_spec(0:5, align = "c")
inter.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F) %>%
kable_styling(latex_options = c("hold_position"))
inter.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F)
#para crear la tabla:
inter.conf <- data.frame(c(inter.beta0[1], inter.beta1[1]), c(inter.beta0[2], inter.beta1[2]), row.names = c("$\\beta_0$", "$\\beta_1$"))
inter.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F) %>%
kable_styling(latex_options = c("hold_position")) %>%
column_spec(2:3, latex_valign = "m") %>%
row_spec(0:5, align = "c")
View(inter.conf)
inter.beta0[1]
inter.beta0[2]
inter.beta1[1]
inter.beta1[2]
inter.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F) %>%
kable_styling(latex_options = "hold_position") %>%
column_spec(2:3, latex_valign = "m") %>%
row_spec(0:5, align = "c")
inter.conf %>%
kable(col.names = c("Límite inferior", "Límite superior"),
booktab = T, caption = "Intervalos de confianza",
row.names = T, escape=  F)
knitr::opts_chunk$set(echo = TRUE, comment = NA, fig.pos="H")
library(knitr)
library(kableExtra)
library(tidyverse)
# if(!require(HH)) install.packages("HH"); library(HH)
%>%
tos[c(6,index), ] %>%
kable(col.names = c("Titulo", "Total de calificaciones",
"Total de calificaciones cinco estrellas"),
booktab = T, caption = "Vista previa de algunas variables",
row.names = F) %>%
kable_styling(position = "center", latex_options = c("hold_position")) %>%
column_spec(2:3, width = "2.5cm", latex_valign = "m") %>%
row_spec(0:5, align = "c")
datos[c(6,index), ] %>%
kable(col.names = c("Titulo", "Total de calificaciones",
"Total de calificaciones cinco estrellas"),
booktab = T, caption = "Vista previa de algunas variables",
row.names = F) %>%
kable_styling(position = "center", latex_options = c("hold_position")) %>%
column_spec(2:3, width = "2.5cm", latex_valign = "m") %>%
row_spec(0:5, align = "c")
rm(list)
rm(list=ls())
clc
clear()
residuos.man <- y - ygorro.man #residuales
#instalando el tidyverse
install.packages("tidyverse")
#cargando el tidyverse
library(tidyverse)
#Ejercicio 1
datos <- read.csv("android-games.csv")
#filtrando la base de datos
datos_modelo <- datos %>%
filter(total_ratings < 4121627,
category == "GAME ACTION") %>%
select(total_ratings, five_star_rating)
#ajustando el modelo manualmente (no lo haga compa)
#definiendo x e y
x <- datos_modelo$total_ratings #covariable
y <- datos_modelo$five_star_rating #respuesta
n <- nrow(datos_modelo) #numero de datos
xbarra <- mean(x) #media muestral de x
ybarra <- mean(y) #media muestral de y
Sxx <- sum((x - xbarra)^2)
Syy <- sum((y - ybarra)^2)
Sxy <- sum((x-xbarra)*(y-ybarra))
beta1.man <- Sxy/Sxx #estimacion de la pendiente
beta0.man <- ybarra - beta1.man*xbarra #estimacion del intercepto
ygorro.man <- beta0.man + beta1.man*x #estimacion de la respuesta media
residuos.man <- y - ygorro.man #residuales
sum(residuos.man)
rm(list=ls())
